import { BehaviorSubject } from 'rxjs/BehaviorSubject';
import { Observer } from 'rxjs/Observer';
import 'rxjs/add/operator/let';
import 'rxjs/add/operator/scan';
import 'rxjs/add/operator/merge';
import 'rxjs/add/operator/do';
import 'rxjs/add/operator/filter';
import { Dispatcher, Middleware, Reducer } from '@ngrx/store';
import { LiftedState } from './reducer';
export declare class StoreDevtools implements Observer<any> {
    liftedState: BehaviorSubject<LiftedState>;
    private _reducer;
    private _initialLiftedState;
    private _liftedDispatcher;
    private _initialState;
    private _preMiddleware;
    private _postMiddleware;
    private _monitorReducer;
    private _dispatcher;
    constructor(_reducer: Reducer<any>, _dispatcher: Dispatcher<any>, _initialState: any, _preMiddleware: Middleware, _postMiddleware: Middleware, _monitorReducer: any);
    private _init();
    connect(nextCallbackFn: (state: any) => void): void;
    replaceReducer(reducer: Reducer<any>): void;
    dispatch(action: any): void;
    next(action: any): void;
    error(error: any): void;
    complete(): void;
    performAction(action: any): void;
    reset(): void;
    rollback(): void;
    commit(): void;
    sweep(): void;
    toggleAction(id: number): void;
    jumpToState(index: number): void;
    importState(nextLiftedState: any): void;
}
