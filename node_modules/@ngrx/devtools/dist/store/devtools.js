"use strict";
var BehaviorSubject_1 = require('rxjs/BehaviorSubject');
require('rxjs/add/operator/let');
require('rxjs/add/operator/scan');
require('rxjs/add/operator/merge');
require('rxjs/add/operator/do');
require('rxjs/add/operator/filter');
var store_1 = require('@ngrx/store');
var store_backend_1 = require('@ngrx/store/store-backend');
var reducer_1 = require('./reducer');
var actions_1 = require('./actions');
var utils_1 = require('./utils');
var StoreDevtools = (function () {
    function StoreDevtools(_reducer, _dispatcher, _initialState, _preMiddleware, _postMiddleware, _monitorReducer) {
        var reducer = reducer_1.liftReducerWith(_reducer, _initialState, _monitorReducer);
        var initialLiftedState = reducer(undefined, { type: store_backend_1.ActionTypes.INIT });
        this.liftedState = new BehaviorSubject_1.BehaviorSubject(initialLiftedState);
        this._reducer = reducer;
        this._initialLiftedState = initialLiftedState;
        this._liftedDispatcher = _dispatcher;
        this._preMiddleware = _preMiddleware;
        this._postMiddleware = _postMiddleware;
        this._monitorReducer = _monitorReducer;
        this._dispatcher = new store_1.Dispatcher();
    }
    StoreDevtools.prototype._init = function () {
        this.dispatch({ type: store_backend_1.ActionTypes.INIT });
    };
    StoreDevtools.prototype.connect = function (nextCallbackFn) {
        var _this = this;
        this._liftedDispatcher
            .let(this._preMiddleware)
            .map(utils_1.liftAction)
            .merge(this._dispatcher)
            .scan(function (state, action) { return _this._reducer(state, action); }, this._initialLiftedState)
            .do(function (liftedState) { return _this.liftedState.next(liftedState); })
            .map(utils_1.unliftState)
            .filter(function (state) { return state !== undefined; })
            .let(this._postMiddleware)
            .subscribe(nextCallbackFn);
        this._init();
    };
    StoreDevtools.prototype.replaceReducer = function (reducer) {
        this._reducer = reducer_1.liftReducerWith(reducer, this._initialState, this._monitorReducer);
        this._init();
    };
    StoreDevtools.prototype.dispatch = function (action) {
        this._dispatcher.next(action);
    };
    StoreDevtools.prototype.next = function (action) {
        this._dispatcher.next(action);
    };
    StoreDevtools.prototype.error = function (error) {
        this._dispatcher.next(error);
    };
    StoreDevtools.prototype.complete = function () {
        this._dispatcher.complete();
    };
    StoreDevtools.prototype.performAction = function (action) {
        this.dispatch(actions_1.StoreDevtoolActions.performAction(action));
    };
    StoreDevtools.prototype.reset = function () {
        this.dispatch(actions_1.StoreDevtoolActions.reset());
    };
    StoreDevtools.prototype.rollback = function () {
        this.dispatch(actions_1.StoreDevtoolActions.rollback());
    };
    StoreDevtools.prototype.commit = function () {
        this.dispatch(actions_1.StoreDevtoolActions.commit());
    };
    StoreDevtools.prototype.sweep = function () {
        this.dispatch(actions_1.StoreDevtoolActions.sweep());
    };
    StoreDevtools.prototype.toggleAction = function (id) {
        this.dispatch(actions_1.StoreDevtoolActions.toggleAction(id));
    };
    StoreDevtools.prototype.jumpToState = function (index) {
        this.dispatch(actions_1.StoreDevtoolActions.jumpToState(index));
    };
    StoreDevtools.prototype.importState = function (nextLiftedState) {
        this.dispatch(actions_1.StoreDevtoolActions.importState(nextLiftedState));
    };
    return StoreDevtools;
}());
exports.StoreDevtools = StoreDevtools;
